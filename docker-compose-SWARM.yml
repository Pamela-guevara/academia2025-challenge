services:
  postgres:
    image: postgres:17-alpine
    deploy:
      restart_policy:
        condition: on-failure # Sólo se resetea en caso que falle el contenedor
      resources:
        limits:
          cpus: "0.5" # Limito el uso del cpu al 50 %
          memory: 512M # Limito el uso de memoria a un máximo de 512 MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/db_user)"]
      interval: 2s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB_FILE: /run/secrets/db_name
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - academia_challenge_net
    secrets:
      - db_user
      - db_password
      - db_name
      - db_port

  appChallenge:
    image: ghcr.io/pamela-guevara/challenge_academia:1.0.0
    depends_on:
      - postgres
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure # Resetea en caso de falla
        delay: 3s # Demora 5 seg entre intentos
        max_attempts: 3 # Máximo 3 intentos fallidos
      placement:
        constraints: [node.role == manager] # las réplicas correrán en el nodo manager
      resources:
        limits:
          cpus: "0.5" # Limito el uso del cpu al 50 %
          memory: 512M # Limito el uso de memoria a un máximo de 512 MB
      update_config:
        parallelism: 1 # Actualiza 1 réplica a la vez
        delay: 10s # Espera 10s entre actualizaciones
        failure_action: rollback # Si falla, vuelve a la versión anterior
        order: start-first # Levanta primero el nuevo contenedor antes de matar el viejo
    ports:
      - target: 3000 # Puerto del contenedor
        published: 3000 # Puerto del host
        protocol: tcp
        mode: ingress # Balanceo de carga
    environment:
      DB_HOST: postgres # Nombre del servicio que contiene a la DB
    networks:
      - academia_challenge_net

  node-exporter:
    image: prom/node-exporter:latest
    command:
      - "--path.rootfs=/host"
    volumes:
      - "/:/host:ro,rslave"
    networks:
      - academia_challenge_net
    deploy:
      mode: global # una instancia por nodo del Swarm
      restart_policy:
        condition: on-failure
    ports:
      - target: 9100
        published: 9100
        protocol: tcp
        mode: host

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro # Necesita acceder a los registros de docker para leer métricas
    networks:
      - academia_challenge_net

  prometheus:
    image: prom/prometheus:latest
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: host
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - academia_challenge_net
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.path=/prometheus"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
        mode: 0444

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    networks:
      - academia_challenge_net
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - target: 9187
        published: 9187
        protocol: tcp
        mode: host
    secrets:
      - db_user
      - db_password
      - db_name
    environment:
      DATA_SOURCE_URI: "$(cat /run/secrets/db_name)?sslmode=disable"
      #  POSTGRES_DB_FILE: /run/secrets/db_name
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - target: 3010
  #       published: 3010
  #       protocol: tcp
  #       mode: host
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning:/etc/grafana/provisioning:ro
  #   networks:
  #     - academia_challenge_net
  #   deploy:
  #     restart_policy:
  #       condition: on-failure

  # loki:
  #   image: grafana/loki:2.8.2
  #   ports:
  #     - target: 3100
  #       published: 3100
  #       protocol: tcp
  #       mode: host
  #   volumes:
  #     - ./loki-config.yml:/etc/loki/local-config.yml:ro
  #     - loki_data:/loki
  #   networks:
  #     - academia_challenge_net
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   command: -config.file=/etc/loki/local-config.yml

  # promtail:
  # image: grafana/promtail:2.8.2
  # volumes:
  #   - /var/log:/var/log:ro
  #   - /etc/machine-id:/etc/machine-id:ro
  #   - ./promtail-config.yml:/etc/promtail/config.yml:ro
  #   - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #   - /var/run/docker.sock:/var/run/docker.sock:ro
  # networks:
  #   - academia_challenge_net
  # deploy:
  #   restart_policy:
  #     condition: on-failure
  # command:
  #   - --config.file=/etc/promtail/config.yml

volumes:
  postgres_data:
  prometheus_data:
#  grafana_data:
#  loki_data:

networks:
  academia_challenge_net:
    external: true # La red ya está creada

secrets:
  db_user:
    external: true
  db_password:
    external: true
  db_name:
    external: true
  db_port:
    external: true

configs:
  prometheus_config:
    external: true
